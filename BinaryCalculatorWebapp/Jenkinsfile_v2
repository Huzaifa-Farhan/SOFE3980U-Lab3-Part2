pipeline {
    agent {
        kubernetes {
            label 'sample-app'
            yaml """
            apiVersion: v1
            kind: Pod
            metadata:
              labels: 
                component: ci
            spec:
              containers:
              - name: gcloud
                image: google/cloud-sdk:latest
                command:
                - cat
                tty: true
            """
        }
    }
    tools {
        maven 'maven'
    }
    environment {
        APP_NAME = "binarycalculatorwebapp"
        IMAGE_TAG = "${REPO_PATH}/${APP_NAME}"
    }
    stages {
        stage('Setup') {
            steps {
                withCredentials([
                    file(credentialsId: 'service_account', variable: 'SERVICE_ACCOUNT'),
                    string(credentialsId: 'project_id', variable: 'PROJECT'),
                    string(credentialsId: 'repo_path', variable: 'REPO_PATH'),
                    string(credentialsId: 'cluster_name', variable: 'CLUSTER'),
                    string(credentialsId: 'cluster_zone', variable: 'CLUSTER_ZONE')
                ]) {
                    sh '''
                        gcloud auth activate-service-account --key-file="${SERVICE_ACCOUNT}"
                        gcloud config set project "${PROJECT}"
                    '''
                }
            }
        }
        stage('Test') {
            steps {
                sh 'mvn clean test -f ./BinaryCalculatorWebapp/pom.xml'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean package -DskipTests -f ./BinaryCalculatorWebapp/pom.xml'
            }
        }
        stage('Containerize') {
            steps {
                container('gcloud') {
                    sh 'gcloud builds submit -t "${IMAGE_TAG}" --suppress-logs'
                }
            }
        }
        stage('Deploy') {
            steps {
                container('gcloud') {
                    sh '''
                        gcloud container clusters get-credentials "${CLUSTER}" --region="${CLUSTER_ZONE}"
                        kubectl apply -f deployment.yaml
                        kubectl set image deployment/binarycalculator-deployment binarycalculator="${IMAGE_TAG}"
                    '''
                }
            }
        }
        stage('Expose Service') {
            steps {
                container('gcloud') {
                    script {
                        def serviceExists = sh(script: "kubectl get svc binarycalculator-service --ignore-not-found", returnStatus: true)
                        if (serviceExists != 0) {
                            sh 'kubectl expose deployment binarycalculator-deployment --type=LoadBalancer --name=binarycalculator-service'
                        }
                    }
                    sh "kubectl get service/binarycalculator-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
                }
            }
        }
    }
}
