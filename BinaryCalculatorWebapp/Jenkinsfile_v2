pipeline {
    environment {
        SERVICE_ACCOUNT = credentials('service_account')  
        PROJECT = credentials('project_id')
        REPO_PATH = credentials('repo_path')  
        APP_NAME = "binarycalculatorwebapp"
        IMAGE_TAG = "${REPO_PATH}/${APP_NAME}"
        CLUSTER = credentials('cluster_name')  
        CLUSTER_ZONE = credentials('cluster_zone')  
    }
    agent {
        kubernetes {
            label 'sample-app'
            yaml """
            apiVersion: v1
            kind: Pod
            metadata:
              labels: 
                component: ci
            spec:
              containers:
              - name: gcloud
                image: google/cloud-sdk:latest
                command:
                - cat
                tty: true
            """
        }
    }
    tools {
        maven 'maven'
    }
    stages {
        stage('Test') {
            steps {
                sh 'mvn clean test -f ./BinaryCalculatorWebapp/pom.xml'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean package -DskipTests -f ./BinaryCalculatorWebapp/pom.xml'
            }
        }
        stage('Containerize') {
            steps {
                container('gcloud') {
                    dir('BinaryCalculatorWebapp') {
                        withEnv(["GCP_SA=${SERVICE_ACCOUNT}", "GCP_PROJECT=${PROJECT}"]) {
                            sh '''
                                gcloud auth activate-service-account --key-file="$GCP_SA"
                                gcloud config set project "$GCP_PROJECT"
                                gcloud builds submit -t "$IMAGE_TAG" --suppress-logs
                            '''
                        }
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                container('gcloud') {
                    dir('BinaryCalculatorWebapp') {
                        withEnv(["GCP_SA=${SERVICE_ACCOUNT}", "GCP_PROJECT=${PROJECT}", "GCP_CLUSTER=${CLUSTER}", "GCP_ZONE=${CLUSTER_ZONE}"]) {
                            sh '''
                                gcloud auth activate-service-account --key-file="$GCP_SA"
                                gcloud config set project "$GCP_PROJECT"
                                gcloud container clusters get-credentials "$GCP_CLUSTER" --region="$GCP_ZONE"
                            '''
                        }
                        script {
                            def deploymentExists = sh(script: "kubectl get deployment binarycalculator-deployment --ignore-not-found", returnStatus: true)
                            if (deploymentExists == 0) {
                                sh 'kubectl delete deployment binarycalculator-deployment'
                            }
                        }
                        sh 'kubectl create deployment binarycalculator-deployment --image="$IMAGE_TAG" --port=8080'
                    }
                }
            }
        }
        stage('Expose Service') {
            steps {
                container('gcloud') {
                    dir('BinaryCalculatorWebapp') {
                        withEnv(["GCP_SA=${SERVICE_ACCOUNT}", "GCP_PROJECT=${PROJECT}", "GCP_CLUSTER=${CLUSTER}", "GCP_ZONE=${CLUSTER_ZONE}"]) {
                            sh '''
                                gcloud auth activate-service-account --key-file="$GCP_SA"
                                gcloud config set project "$GCP_PROJECT"
                                gcloud container clusters get-credentials "$GCP_CLUSTER" --region="$GCP_ZONE"
                            '''
                        }
                        script {
                            def serviceExists = sh(script: "kubectl get svc binarycalculator-service --ignore-not-found", returnStatus: true)
                            if (serviceExists != 0) {
                                sh 'kubectl expose deployment binarycalculator-deployment --type=LoadBalancer --name=binarycalculator-service'
                            }
                        }
                        sh "kubectl get service/binarycalculator-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
                    }
                }
            }
        }
    }
}
